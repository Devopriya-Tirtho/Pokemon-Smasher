# include "iGraphics.h"
#include<string.h>
#include <time.h>
/*
function iDraw() is called again and again by the system.
*/
void town_map();
int pointerX, pointerY, town, t, playerX=350, playerY=50, m=5, myPkmnX=50, myPkmnY=100,moveX=100,moveY=50, t2,m2=5,eMoveNumber;

boolean showTown = false, notBattle=true, fight=false, moving=true;
boolean emoving = true;

double points;

int t4;

int removePokemon;

struct enimMove {
	int x;
	int y;
	boolean show;
}movement,enem[5];

struct attack {
	char attk_name[30];
	double power;
	double type_identifier;
	int id;
}moves[20], selectedMove, enememyMove;

struct pokemon {
	char pokemon_name[30];
	struct attack move[4];
	//double id;
	double level;
	int health;
	double type_identifier;
	int id;
	double getHealth()
	{
		return health + (health*(level / 3));
	}
}characters[10], myPkmn_1, myPkmn_2, myPkmn_3, enemyPkmn;

struct moveAnimation {
	int x;
	int y;
	boolean show;
}moveAnim[100],eMoveAnim[100],a;
//struct moveAnimation moveAnim[100], eMoveAnim[100], a;
struct pokemonMovement {
	double x;
	double y;
	boolean show;
}myPokemonMovement, opponentMove;

//myPokemonMovement.x = 300;


int moveNumber = 0,t3;

							//type identifier of grass=1
							//type identifier of fire=2
							//type identifier of water=3
							//type idnetifier of flying=4
							//type identifier of fight=5
							//type identifier of electric=6
							//type identifier of normal=7 
int i = 0;
int j,x;
double slope;// = 1.66;
void opponentMovement() {
	opponentMove.y += m2;
	//i++;
	/*if (i % 5 == 0) {
		int j = rand() % 4;
		enememyMove=enemyPkmn.move[j];
		displayMove(enememyMove, opponentMove.x, opponentMove.y);

	}*/
	x+=5;
	if (opponentMove.y > 560)
		m2 = -5;
	if (opponentMove.y < 0)
		m2 = 5;
	if (x%1000==0 ){//|| !eMoveAnim[eMoveNumber - 1].show) {
		j = rand() % 4;
		//iResumeTimer(t4);
		slope = ((opponentMove.y - myPokemonMovement.y) / (opponentMove.x - myPokemonMovement.x));
		enememyMove = enemyPkmn.move[j];
		eMoveNumber++;
		eMoveAnim[moveNumber - 1].x = opponentMove.x;
		eMoveAnim[moveNumber - 1].y = opponentMove.y;
		eMoveAnim[moveNumber - 1].show = true;
		//moveNumber=0;
		moving = false;
		printf("using attack\n");
	
	}

}

void attack_list() {
	/*Ember*/
	strcpy(moves[0].attk_name, "Ember");
	moves[0].power = 40;
	moves[0].type_identifier = 2;
	moves[0].id = 0;
	
	/*Flamethrower*/
	strcpy(moves[1].attk_name, "Flamethrower");
	moves[1].power = 80;
	moves[1].type_identifier = 2;
	moves[1].id = 1;
	
	/*Fire Blast*/
	strcpy(moves[2].attk_name, "Fire Blast");
	moves[2].power = 110;
	moves[2].type_identifier = 2;
	moves[2].id = 2;
	
	/*Razor Leaf*/
	strcpy(moves[3].attk_name, "Razor Leaf");
	moves[3].power = 40;
	moves[3].type_identifier = 1;
	moves[3].id = 3;
	
	/*Seed Bomb*/
	strcpy(moves[4].attk_name, "Seed Bomb");
	moves[4].power = 80;
	moves[4].type_identifier = 1;
	moves[4].id = 4;

	/*Solar Beam*/
	strcpy(moves[5].attk_name, "Solar Beam");
	moves[5].power = 110;
	moves[5].type_identifier = 1;
	moves[5].id = 5;
	
	/*Water Gun*/
	strcpy(moves[6].attk_name, "Water Gun");
	moves[6].power = 40;
	moves[6].type_identifier = 3;
	moves[6].id = 6;
	
	/*Water Pulse*/
	strcpy(moves[7].attk_name, "Water Pulse");
	moves[7].power = 80;
	moves[7].type_identifier = 3;
	moves[7].id = 7;
	
	/*Hydro Pump*/
	strcpy(moves[8].attk_name, "Hydro Pump");
	moves[8].power = 110;
	moves[8].type_identifier = 3;
	moves[8].id = 8;

	/*Tackle*/
	strcpy(moves[9].attk_name, "Tackle");
	moves[9].power = 40;
	moves[9].type_identifier = 7;
	moves[9].id = 9;
	
	/*Quick Attack*/
	strcpy(moves[10].attk_name, "Swift");
	moves[10].power = 60;
	moves[10].type_identifier = 7;
	moves[10].id = 10;
	
	/*Thundershock*/
	strcpy(moves[11].attk_name, "Thundershock");
	moves[11].power = 50;
	moves[11].type_identifier = 6;
	moves[11].id = 11;
	
	/*Thunderbolt*/
	strcpy(moves[12].attk_name, "Thunderbolt");
	moves[12].power = 80;
	moves[12].type_identifier = 6;
	moves[12].id = 12;

	/*Carate Chop*/
	strcpy(moves[13].attk_name, "Karate Chop");
	moves[13].power = 50;
	moves[13].type_identifier = 5;
	moves[13].id = 13;
	
	/*Cross Chop*/
	strcpy(moves[14].attk_name, "Cross Chop");
	moves[14].power = 80;
	moves[14].type_identifier = 5;
	moves[14].id = 14;
	
	/*Gust*/
	strcpy(moves[15].attk_name, "Gust");
	moves[15].power = 40;
	moves[15].type_identifier = 4;
	moves[15].id = 15;
	
	/*Wing Attack*/
	strcpy(moves[16].attk_name, "Wing Attack");
	moves[16].power = 70;
	moves[16].type_identifier = 4;
	moves[16].id = 16;
}


double type_advantage(struct pokemon pkmn_type, struct attack pkmn_atk)
{
	//double type_advantage;
	int atk_type = pkmn_atk.type_identifier;
	if (pkmn_type.type_identifier == 1)
	{
		switch (atk_type)
		{
		case 1:
		case 3:
			return 0.5;
			//return 0.5;
		case 2:
			return 2;
		//case 3:
			//return 0.5;
		default:
			return 1;
		}

	}
	if (pkmn_type.type_identifier == 2)
	{
		switch (atk_type)
		{
		case 2:
		case 1:
			return 0.5;
		case 3:
			return 2;
		default:
			return 1;
		}

	}
	if (pkmn_type.type_identifier == 3)
	{
		switch (atk_type)
		{
		case 1:
			return 2;
		case 3:
			//return 0.5;
		case 2:
			return .5;
		default:
			return 1;
		}

	}
	if (pkmn_type.type_identifier == 4)
	{
		switch (atk_type)
		{
		case 6:
			return 2;
		case 5:
			//return 0.5;
		case 4:
			return .5;
		default:
			return 1;
		}

	}
	if (pkmn_type.type_identifier == 5)
	{
		switch (atk_type)
		{
		case 4:
			return 2;
		case 7:
			return .5;
		default:
			return 1;
		}

	}
	if (pkmn_type.type_identifier == 6)
	{
		switch (atk_type)
		{
		case 7:
			return 2;
		case 3:
			//return 0.5;
		case 1:
			return .5;
		default:
			return 1;
		}

	}
	if (pkmn_type.type_identifier == 7)
	{
		switch (atk_type)
		{
		case 5:
			return 2;
		default:
			return 1;
		}

	}
}

void pokemon_list() {
	/*Bulbasaur::ID 0*/
	strcpy(characters[0].pokemon_name, "Bulbasaur");
	characters[0].type_identifier = 1;
	characters[0].move[0] = moves[3]; //razor leaf
	characters[0].move[1] = moves[9]; //tackle
	characters[0].move[2] = moves[4]; //seed bomb
	characters[0].move[3] = moves[5]; //solar beam
	characters[0].health = 200;
	characters[0].id = 0;

	/*Charmander:: ID 1*/
	strcpy(characters[1].pokemon_name, "Charmander");
	characters[1].type_identifier = 2;
	characters[1].move[0] = moves[0]; //ember
	characters[1].move[1] = moves[10]; //quick attack
	characters[1].move[2] = moves[1]; //flamethrower
	characters[1].move[3] = moves[2]; //fire blast
	characters[1].health = 188;
	characters[1].id = 1;
	//characters[1].health = 190;

	/*Squirtel:: ID 2*/
	strcpy(characters[2].pokemon_name, "Squirtel");
	characters[2].type_identifier = 3;
	characters[2].move[0] = moves[6]; //water gun
	characters[2].move[1] = moves[9]; //tackle
	characters[2].move[2] = moves[7]; //water pulse
	characters[2].move[3] = moves[8]; //hydro pump
	characters[2].health = 198;
	characters[2].id = 2;

	/*Pikachu:: ID 3*/
	strcpy(characters[3].pokemon_name, "Pikachu");
	characters[3].type_identifier = 6;
	characters[3].move[0] = moves[11]; //thundershock
	characters[3].move[1] = moves[9]; //tackle
	characters[3].move[2] = moves[10]; //quick attack
	characters[3].move[3] = moves[12]; //thunderbolt
	characters[3].health = 180;
	characters[3].id = 3;

	/*Pidgey:: ID 4*/
	strcpy(characters[4].pokemon_name, "Pidgey");
	characters[4].type_identifier = 4;
	characters[4].move[0] = moves[9]; //tackle
	characters[4].move[1] = moves[15]; //gust
	characters[4].move[2] = moves[16]; //wing attack
	characters[4].move[3] = moves[10]; //quick attack
	characters[4].health = 190;
	characters[4].id = 4;

	/*Mankey:: ID 5*/
	strcpy(characters[5].pokemon_name, "Mankey");
	characters[5].type_identifier = 5;
	characters[5].move[0] = moves[9]; //tackle
	characters[5].move[1] = moves[13]; //carate chop
	characters[5].move[2] = moves[14]; //cross chop
	characters[5].move[3] = moves[10]; //quick attack
	characters[5].health = 190;
	characters[5].id = 5;

	/*Ponyta:: ID 6*/
	strcpy(characters[6].pokemon_name, "Ponyta");
	characters[6].type_identifier = 2;
	characters[6].move[0] = moves[9]; //tackle
	characters[6].move[1] = moves[10]; //quick attack
	characters[6].move[2] = moves[0]; //ember
	characters[6].move[3] = moves[1]; //flamethrower
	characters[6].health = 210;
	characters[6].id = 6;

	/*Porygon:: ID 7*/
	strcpy(characters[7].pokemon_name, "Porygon");
	characters[7].type_identifier = 7;
	characters[7].move[0] = moves[10]; //quick attack
	characters[7].move[1] = moves[9]; //tackle
	characters[7].move[2] = moves[12]; //thunderbolt
	characters[7].move[3] = moves[6]; //water gun
	characters[7].health = 240; 
	characters[7].id = 7;

	/*Exeggutor:: ID 8*/
	strcpy(characters[8].pokemon_name, "Exeggutor");
	characters[8].type_identifier = 1;
	characters[8].move[0] = moves[10]; //quick attack
	characters[8].move[1] = moves[4]; //seed bomb
	characters[8].move[2] = moves[5]; //solar beam
	characters[8].move[3] = moves[3]; //razor leaf
	characters[8].health = 300;
	characters[8].id = 8;

	/*Polywrath:: ID 9*/
	strcpy(characters[9].pokemon_name, "Polywrath");
	characters[9].type_identifier = 3;
	characters[9].move[0] = moves[7]; //water pulse
	characters[9].move[1] = moves[8]; //hydro pump
	characters[9].move[2] = moves[13]; //carate chop
	characters[9].move[3] = moves[14]; //cross chop
	characters[9].health = 290;
	characters[9].id = 9;

}


void showEnemy(struct pokemon pkmn,int x, int y)
{
	switch (pkmn.id) 
	{
	case 4:
		iShowBMP(x,y, "pidgey.bmp");
		break;
	case 1:
		iShowBMP(x,y, "charmander.bmp");
		break;
	case 0:
		iShowBMP(x, y, "bulbasaur.bmp");
		break;
	case 2:
		iShowBMP(x, y, "squirtel.bmp");
		break;
	case 3:
		iShowBMP(x, y, "pikachu.bmp");
		break;
	case 5:
		iShowBMP(x, y, "mankey.bmp");
		break;
	case 6:
		iShowBMP(x, y, "ponyta.bmp");
		break;
	case 7:
		iShowBMP(x, y, "porygon.bmp");
		break;
	case 8:
		iShowBMP(x, y, "exeguttor.bmp");
		break;
	case 9:
		iShowBMP(x, y, "polywrath.bmp");
		break;
	}
}

void displayMove(struct attack move, int x, int y) {
	switch (move.id) {
	case 0:
		//iShowBMP(x, y, "ember.bmp");
		for (int i=0; i < moveNumber; i++) {
			if (moveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(moveAnim[i].x, moveAnim[i].y, "ember.bmp");
		}
		break;
	case 1:
		//iShowBMP(x, y, "flamethrower.bmp");
		for (int i=0; i < moveNumber; i++) {
			if (moveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(moveAnim[i].x, moveAnim[i].y, "flamethrower.bmp");
		}
		break;
	case 2:
		//iShowBMP(x, y, "fireblast.bmp");
		for (int i=0; i < moveNumber; i++) {
			if (moveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(moveAnim[i].x, moveAnim[i].y, "fireblast.bmp");
		}
		break;
	case 3:
		for (int i = 0; i < moveNumber; i++) {
			if (moveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(moveAnim[i].x, moveAnim[i].y, "razorleaf.bmp");
		}
		break;
	case 4:
		for (int i = 0; i < moveNumber; i++) {
			if (moveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(moveAnim[i].x, moveAnim[i].y, "seedbomb.bmp");
		}
		break;
	case 5:
		for (int i = 0; i < moveNumber; i++) {
			if (moveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(moveAnim[i].x, moveAnim[i].y, "solarbeam.bmp");
		}
		break;
	case 6:
		for (int i = 0; i < moveNumber; i++) {
			if (moveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(moveAnim[i].x,moveAnim[i].y, "watergun.bmp");
		}
		break;
	case 7:
		for (int i = 0; i < moveNumber; i++) {
			if (moveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(moveAnim[i].x, moveAnim[i].y, "waterpulse.bmp");
		}
		break;
	case 8:
		for (int i = 0; i < moveNumber; i++) {
			if (moveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(moveAnim[i].x, moveAnim[i].y, "hydropump.bmp");
		}
		break;
	case 9:		
		for (int i = 0; i < moveNumber; i++) {
		if (moveAnim[i].show)
			//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
			iShowBMP(moveAnim[i].x, moveAnim[i].y, "tackle.bmp");
	}
		break;
	case 10:
		for (int i = 0; i < moveNumber; i++) {
			if (moveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(moveAnim[i].x, moveAnim[i].y, "swift.bmp");
		}
		break;
	case 11:
		for (int i = 0; i < moveNumber; i++) {
			if (moveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(moveAnim[i].x, moveAnim[i].y, "thundershock.bmp");
		}
		break;
	case 12:
		for (int i = 0; i < moveNumber; i++) {
			if (moveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(moveAnim[i].x, moveAnim[i].y, "thunderbolt.bmp");
		}
		break;
	case 13:
		for (int i = 0; i < moveNumber; i++) {
			if (moveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(moveAnim[i].x, moveAnim[i].y, "karatechop.bmp");
		}
		break;
	case 14:
		for (int i = 0; i < moveNumber; i++) {
			if (moveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(moveAnim[i].x, moveAnim[i].y, "crosschop.bmp");
		}
		break;
	case 15:
		for (int i = 0; i < moveNumber; i++) {
			if (moveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(moveAnim[i].x, moveAnim[i].y, "gust.bmp");
		}
		break;
	case 16:
		for (int i = 0; i < moveNumber; i++) {
			if (moveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(moveAnim[i].x, moveAnim[i].y, "wingattack.bmp");
		}
		break;

	}

}

void enemyDisplayMove(struct attack move) {
	switch (move.id) {
	case 0:
		//iShowBMP(x, y, "ember.bmp");
		for (int i = 0; i < eMoveNumber; i++) {
			if (eMoveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(eMoveAnim[i].x, eMoveAnim[i].y, "ember.bmp");
		}
		break;
	case 1:
		//iShowBMP(x, y, "flamethrower.bmp");
		for (int i = 0; i < eMoveNumber; i++) {
			if (moveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(eMoveAnim[i].x, eMoveAnim[i].y, "flamethrower.bmp");
		}
		break;
	case 2:
		//iShowBMP(x, y, "fireblast.bmp");
		for (int i = 0; i < eMoveNumber; i++) {
			if (eMoveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(eMoveAnim[i].x, eMoveAnim[i].y, "fireblast.bmp");
		}
		break;
	case 3:
		for (int i = 0; i < eMoveNumber; i++) {
			if (eMoveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(eMoveAnim[i].x, eMoveAnim[i].y, "razorleaf.bmp");
		}
		break;
	case 4:
		for (int i = 0; i < eMoveNumber; i++) {
			if (eMoveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(eMoveAnim[i].x, eMoveAnim[i].y, "seedbomb.bmp");
		}
		break;
	case 5:
		for (int i = 0; i < eMoveNumber; i++) {
			if (eMoveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(eMoveAnim[i].x, eMoveAnim[i].y, "solarbeam.bmp");
		}
		break;
	case 6:
		for (int i = 0; i < eMoveNumber; i++) {
			if (eMoveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(eMoveAnim[i].x, eMoveAnim[i].y, "watergun.bmp");
		}
		break;
	case 7:
		for (int i = 0; i < eMoveNumber; i++) {
			if (eMoveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(eMoveAnim[i].x, eMoveAnim[i].y, "waterpulse.bmp");
		}
		break;
	case 8:
		for (int i = 0; i < eMoveNumber; i++) {
			if (eMoveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(eMoveAnim[i].x, eMoveAnim[i].y, "hydropump.bmp");
		}
		break;
	case 9:
		for (int i = 0; i < eMoveNumber; i++) {
			if (eMoveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(eMoveAnim[i].x, eMoveAnim[i].y, "tackle.bmp");
		}
		break;
	case 10:
		for (int i = 0; i < eMoveNumber; i++) {
			if (eMoveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(eMoveAnim[i].x, eMoveAnim[i].y, "swift.bmp");
		}
		break;
	case 11:
		for (int i = 0; i < eMoveNumber; i++) {
			if (eMoveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(eMoveAnim[i].x, eMoveAnim[i].y, "thundershock.bmp");
		}
		break;
	case 12:
		for (int i = 0; i < eMoveNumber; i++) {
			if (eMoveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(eMoveAnim[i].x, eMoveAnim[i].y, "thunderbolt.bmp");
		}
		break;
	case 13:
		for (int i = 0; i < eMoveNumber; i++) {
			if (eMoveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(eMoveAnim[i].x, eMoveAnim[i].y, "karatechop.bmp");
		}
		break;
	case 14:
		for (int i = 0; i < eMoveNumber; i++) {
			if (eMoveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(eMoveAnim[i].x, eMoveAnim[i].y, "crosschop.bmp");
		}
		break;
	case 15:
		for (int i = 0; i < eMoveNumber; i++) {
			if (eMoveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(eMoveAnim[i].x, eMoveAnim[i].y, "gust.bmp");
		}
		break;
	case 16:
		for (int i = 0; i < eMoveNumber; i++) {
			if (eMoveAnim[i].show)
				//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
				iShowBMP(eMoveAnim[i].x, eMoveAnim[i].y, "wingattack.bmp");
		}
		break;

	}

}


void setEnimPos() 
{
		
	enem[0].x = 10;
	enem[0].y = rand()%40;
	enem[1].x = 70;
	enem[1].y = rand()%40+125;
	enem[2].x = 100;
	enem[2].y = rand()%40 +250;
	enem[3].x = 700;
	enem[3].y = rand()%40 + 370;
	enem[4].x = 80;
	enem[4].y = rand()%40 + 495;
	opponentMove.x = 700;
}

void enimMove() {
	for (int i = 0; i < 5; i++)
	{
		enem[i].x += m;
		if (enem[i].x > 900)
			enem[i].x = rand() % 300;
	}
}

double damage_calculation(struct pokemon offense_pokemon, struct pokemon deffense_pokemon, struct attack selected_move) {
	
	double damage;
	
	damage = ((selected_move.power+(selected_move.power*offense_pokemon.level/3))/deffense_pokemon.level)*type_advantage(deffense_pokemon,selected_move);
	
	return damage;
}
//int xCord[2] = { 30,50 }, yCord[2] = {100,400},d1=1,d2=2;
//void battle();
//int battleHealth;
double damage, enemyDamage;
void moveAnimation() {
	for (int i = 0; i < moveNumber; i++)
	{
		if (moveAnim[i].show)
			moveAnim[i].x += 20;
		if (moveAnim[i].x > 960) {
			moveAnim[i].show = false;
			//moveAnim[i].x = 9000;
			//moving= true;
		}
		if ((moveAnim[i].x + 64 > opponentMove.x&&moveAnim[i].x < opponentMove.x + 80) && (moveAnim[i].y + 64 > opponentMove.y&&moveAnim[i].y < opponentMove.y + 80))
			//enemyPkmn.health -= 30;
		{
			printf("Collided\n");
			moveAnim[i].show = false;
			moveAnim[i].x = 9000;
			//battleHealth = enemyPkmn.health;
			//battleHealth -= 20;
			//enemyPkmn.health -= 30;
			//printf("%d\n", battleHealth);
			damage += damage_calculation(myPkmn_1, enemyPkmn, selectedMove);
			//points += 80;
			printf("%lf\n%d\n", damage, enemyPkmn.health);
			
			printf("%lf\t",(opponentMove.y/myPokemonMovement.y) );
			//if (damage > 200)
				//notBattle = true;
		}

		//printf("%d\t", moveAnim[i].x);
	}
}

void eMoveAnimation() {
	for (int i = 0; i < eMoveNumber; i++)
	{
		if (eMoveAnim[i].show) {
			//printf("using move\t");
			eMoveAnim[i].x -= 20;
			eMoveAnim[i].y -= (slope * 20);
			//printf("%lf\t", slope);
		}
		if (eMoveAnim[i].x < 0) {
			eMoveAnim[i].show = false;
			//moveAnim[i].x = 9000;
			//moving= true;
		}
		if ((eMoveAnim[i].x < myPokemonMovement.x+80 && eMoveAnim[i].x +80 > myPokemonMovement.x) && (eMoveAnim[i].y + 64 > myPokemonMovement.y&&eMoveAnim[i].y < myPokemonMovement.y + 80))
			//enemyPkmn.health -= 30;
		{
			printf("Collided\n");
			eMoveAnim[i].show = false;
			eMoveAnim[i].y = 9000;
			enemyDamage += damage_calculation(enemyPkmn, myPkmn_1, enememyMove);
			//battleHealth = enemyPkmn.health;
			//battleHealth -= 20;
			//enemyPkmn.health -= 30;
			//printf("%d\n", battleHealth);
			//damage += damage_calculation(myPkmn_1, enemyPkmn, enememyMove);
			//points += 80;
			//printf("%lf\n%d\n", damage, enemyPkmn.health);
			//if (damage > 200)
			//notBattle = true;
		}

		//printf("%d\t", moveAnim[i].x);
	}
}
//void show_town1();
void show_Town_1();
void battle() {
	iClear();
	iSetColor(255, 255, 255);
	iFilledRectangle(0, 0, 960, 640);
	showEnemy(enemyPkmn,opponentMove.x,opponentMove.y);
	//myPokemonMovement.x = 300;
	//myPokemonMovement.y = 200;
	showEnemy(myPkmn_1, myPokemonMovement.x, myPokemonMovement.y);
	iSetColor(23, 57, 200);
	iFilledRectangle(100, 100, (myPkmn_1.health-enemyDamage), 30);
	iFilledRectangle(700, 500, (enemyPkmn.health-damage), 30);

	/*if (fight)
	{
	displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
	//iResumeTimer(t2);
	}*/
	/*for (int i = 0; i < moveNumber; i++) {
		if (moveAnim[i].show)
			//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
			iShowBMP(moveAnim[i].x, moveAnim[i].y, "ember.bmp");
	}*/
	if (damage > enemyPkmn.health)
		//notBattle = true;
	{
		//notBattle = false;
		//iPauseTimer(t3);
		//show_Town_1();
		//enem[removePokemon].show = false;
		notBattle = true;
		enem[removePokemon].y = 9000;
		iResumeTimer(t);
	}
}
void show_Town_1() {
	town = 1;
	//myPkmn_1 = characters[2];
	iClear();

	iShowBMP(0, 0, "tut.bmp");
	//iShowBMP2(playerX, playerY, "player.bmp",0);
	iShowBMP2(playerX, playerY, "player.bmp", 0);
	iResumeTimer(t);

	//setEnimPos();
	//if(enem[0].show)
		iShowBMP(enem[0].x, enem[0].y, "pikachu.bmp");
	//if (enem[1].show)
		iShowBMP(enem[1].x, enem[1].y, "bulbasaur.bmp");
	//if (enem[2].show)
		iShowBMP(enem[2].x, enem[2].y, "pikachu.bmp");
	//if (enem[3].show)
		iShowBMP(enem[3].x, enem[3].y, "pidgey.bmp");
	//if (enem[4].show)
		iShowBMP(enem[4].x, enem[4].y, "mankey.bmp");
	iSetColor(0, 0, 0);
	iFilledRectangle(0, 600, 70, 40);
	iSetColor(255, 0, 0);
	iText(5, 602, "Town Map", GLUT_BITMAP_TIMES_ROMAN_10);
	if ((pointerX > 0 && pointerX < 70) && (pointerY > 600 && pointerY < 640))
		town_map();
	//t = iSetTimer(200, enimMove);
	if ((playerX +64> enem[3].x&&playerX < enem[3].x + 80) && (playerY+64 > enem[3].y&&playerX < enem[3].y + 80))
	{
		enemyPkmn = characters[4];
		enemyPkmn.level = 1;
		//battleHealth = myPkmn_1.health;
		notBattle = false;
		iPauseTimer(t);
		iResumeTimer(t3);
		removePokemon = 3;
		//battle();
	}
	if ((playerX + 64> enem[0].x&&playerX < enem[0].x + 80) && (playerY + 64 > enem[0].y&&playerY < enem[0].y + 80))
	{
		enemyPkmn = characters[3];
		enemyPkmn.level = 1;
		notBattle = false;
		iResumeTimer(t3);
		iPauseTimer(t);
		removePokemon = 0;
		//battle();
	}
	if ((playerX + 64> enem[1].x&&playerX < enem[1].x + 80) && (playerY + 64 > enem[1].y&&playerY < enem[1].y + 80))
	{
		enemyPkmn = characters[0];
		enemyPkmn.level = 1;
		notBattle = false;
		iResumeTimer(t3);
		iPauseTimer(t);
		removePokemon = 1;
		//battle();
	}
	if ((playerX + 64> enem[2].x&&playerX < enem[2].x + 80) && (playerY + 64 > enem[2].y&&playerX < enem[2].y + 80))
	{
		enemyPkmn = characters[3];
		enemyPkmn.level = 1;
		notBattle = false;
		iResumeTimer(t3);
		iPauseTimer(t);
		removePokemon = 2;
		//battle();
	}
	if ((playerX + 64> enem[4].x&&playerX < enem[4].x + 80) && (playerY + 64 > enem[4].y&&playerX < enem[4].y + 80))
	{
		enemyPkmn = characters[5];
		enemyPkmn.level = 1;
		notBattle = false;
		iResumeTimer(t3);
		iPauseTimer(t);
		removePokemon = 4;
		//battle();
	}
	/*if (!notBattle) {
		battle();
	}*/
	//if (damage > 200)
		//notBattle = true;
		//show_Town_1();
	//displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
}


void show_Town_2() {
	town = 2;
	iClear();
	//iText(400, 400, enemyPkmn.pokemon_name);
}


void show_Town_3() {

}


void show_Town_4() {


}


void show_Town_5() {

}


void town_map()
{
	iClear();

	iSetColor(250, 250, 250);
	iFilledRectangle(0, 0, 960, 640);

	iSetColor(255, 0, 0);
	iFilledRectangle(438, 85, 60, 60);
	iFilledRectangle(53, 500, 60, 60);
	iFilledRectangle(847, 185, 60, 60);
	iFilledRectangle(847, 510, 60, 60);
	iFilledRectangle(313, 290, 60, 60);

	iSetColor(185, 122, 86);
	iFilledRectangle(113, 510, 110, 40);
	iFilledRectangle(183, 195, 40, 315);
	iFilledRectangle(223, 300, 90, 40);
	iFilledRectangle(857, 245, 40, 265);
	iFilledRectangle(183, 195, 664, 40);
	iFilledRectangle(448, 145, 40, 50);

	iSetColor(0, 168, 243);
	iFilledEllipse(529, 469, 230, 80);

	iSetColor(88, 88, 88);
	iText(695, 76, "Town Map", GLUT_BITMAP_TIMES_ROMAN_24);

	iSetColor(63, 72, 204);
	iText(849, 170, "Pacific Lodge Town");
	iText(36, 489, "Sootopolis Town");
	iText(825, 577, "Little Room Town");
	iText(301, 273, "Vanderturf Town");
	iText(415, 69, "Dewford Town");

	iSetColor(14, 209, 69);
	iText(36, 469, "(Points Required:0)", GLUT_BITMAP_HELVETICA_10);
	iText(849, 150, "(Points Required:5000)", GLUT_BITMAP_HELVETICA_10);
	iText(295, 253, "(Points Required:2000)", GLUT_BITMAP_HELVETICA_10);

	iText(825, 597, "(Points Required:8000)", GLUT_BITMAP_HELVETICA_10);
	iText(410, 49, "(Points Required:11000)", GLUT_BITMAP_HELVETICA_10);

	
					/*Town Selection Portion*/
	if ((pointerX > 53 && pointerX < 113) && (pointerY > 500 && pointerY < 540))
	{
		if (points >= 0)
			show_Town_1();
		else
		{
			iSetColor(0, 0, 0);
			iText(120, 76, "Not Enough Points!!", GLUT_BITMAP_TIMES_ROMAN_24);
		}
	}
	if ((pointerX > 313 && pointerX < 373) && (pointerY > 290 && pointerY < 350))
	{
		if (points >= 2000)
			show_Town_2();
		else
		{
			iSetColor(0, 0, 0);
			iText(120, 76, "Not Enough Points!!", GLUT_BITMAP_TIMES_ROMAN_24);
		}
	}
	if ((pointerX > 847 && pointerX < 907) && (pointerY > 185 && pointerY < 245))
	{
		if (points >= 5000)
			show_Town_3();
		else
		{
			iSetColor(0, 0, 0);
			iText(120, 76, "Not Enough Points!!", GLUT_BITMAP_TIMES_ROMAN_24);
		}
	}
	if ((pointerX > 847 && pointerX < 907) && (pointerY > 510 && pointerY < 570))
	{
		if (points >= 8000)
			show_Town_4();
		else
		{
			iSetColor(0, 0, 0);
			iText(120, 76, "Not Enough Points!!", GLUT_BITMAP_TIMES_ROMAN_24);
		}
	}
	if ((pointerX > 438 && pointerX < 498) && (pointerY > 85 && pointerY < 145))
	{
		if (points >= 11000)
			show_Town_5();
		else
		{
			iSetColor(0, 0, 0);
			iText(120, 76, "Not Enough Points!!", GLUT_BITMAP_TIMES_ROMAN_24);
		}
	}
}

int screen=1, b;
boolean choose=false;

void screen_1()
{
	iClear();
	iShowBMP(0, 0, "tut.bmp");

	//iShowBMP2(playerX, playerY, "player.bmp", 0);
	//iShowBMP2(playerX, playerY, "player.bmp", 0);
	iShowBMP2(playerX, playerY, "player.bmp", 0);
	iShowBMP(200, 300, "house_1.bmp");
	iShowBMP(600, 350, "house_2.bmp");

	if ((playerX > 200 && playerX < 400) && (playerY > 236 && playerY < 436))
	{
		showTown = true;
		screen = 2;
	}

	if ((playerX > 600 && playerX < 800) && (playerY > 286 && playerY < 486))
	{
		screen = 3;
		choose = true;
	}
}
void choice() {
	//printf("%d\n", screen);
	iClear();
	iSetColor(240, 240, 240);
	iFilledRectangle(0, 0, 960, 640);

	iShowBMP(200, 350, "bulbasaur.bmp");
	iShowBMP2(400, 350, "charmander.bmp",0);
	iShowBMP(600, 350, "squirtel.bmp");

	iSetColor(255, 0, 0);
	iText(320, 280, "Choose your Pokemon!", GLUT_BITMAP_TIMES_ROMAN_24);

	if ((pointerX > 200 && pointerX < 328) && (pointerY > 350 && pointerY < 478)) {
		b = 1;
		myPkmn_1 = characters[0];
		myPkmn_1.level = 1;
		iSetColor(32, 64, 128);
		iText(320, 590, "You chose Bulbasaur!", GLUT_BITMAP_TIMES_ROMAN_24);
		iText(650, 90, "Press here to return to last screen");
	}

	if ((pointerX > 400 && pointerX < 528) && (pointerY > 350 && pointerY < 478)) {
		b = 0;
		myPkmn_1 = characters[1];
		iSetColor(32, 64, 128);
		iText(320, 590, "You chose Charmander!", GLUT_BITMAP_TIMES_ROMAN_24);
		iText(650, 90, "Press here to return to last screen");
	}

	if ((pointerX > 600 && pointerX < 728) && (pointerY > 350 && pointerY < 478)) {

		screen = 1;
		myPkmn_1 = characters[2];
		iSetColor(32, 64, 128);
		iText(320, 590, "You chose Squirtel!", GLUT_BITMAP_TIMES_ROMAN_24);
		iText(650, 90, "Press here to return to last screen");
	}
}
/*int i = 2;
void enemyStrike() {
	//static int i = 2;
	movement.y += m;
	
	//movement.y += m;
	i++;
	if (movement.y > 600)
		m = -5;
	if (movement.y < 30)
		m = 5;
}*/



void iDraw()
{
	//place your drawing codes here	
	iClear();
	if (screen == 1)
	{
		screen_1();
	}
	if (choose)
	{
		choice();
	}
	if ((pointerX > 650 && pointerX < 720) && (pointerY > 90 && pointerY < 110))
	{
		screen = 1;
		choose = false;
		screen_1();
	}

	if (showTown)
	{
		town_map();
	}
	if (!notBattle) {
		battle();
	}
	if (damage > enemyPkmn.health)
		//notBattle = true;
	{
		notBattle = true;
		iPauseTimer(t3);
		damage = 0;
		points += 1000;
	}
	if (enemyDamage > myPkmn_1.health) {
		notBattle = true;
		iPauseTimer(t3);
		enemyDamage = 0;
		points -= 500;
	}
	displayMove(selectedMove, moveAnim[moveNumber].x, moveAnim[moveNumber].y);
	if (!notBattle)
	{
		//iResumeTimer(t4);
		enemyDisplayMove(enememyMove);
	}
	if (points > 5000) {
		myPkmn_1.level = 2;
	}
	if (points > 10000) {
		myPkmn_1.level = 3;
	}
	//slope = ((opponentMove.y - myPokemonMovement.y) / (opponentMove.x - myPokemonMovement.x));
	//enemyDisplayMove(enememyMove);
	//iText(400, 370, "Start Game",GLUT_BITMAP_TIMES_ROMAN_24);
	//iRectangle(378, 364, 154, 30);
	//town_map();
	//setEnemy();
	//displayMove(selectedMove, moveAnim[moveNumber]);
	/*showEnemy(enemyPkmn, movement.x, movement.y);
	if (i % 10 == 0)
	{
		int j = rand() % 3;
		displayMove(enemyPkmn.move[j], movement.x, movement.y);
	}*/

}

void iMouseMove(int mx, int my)
{
	//place your codes here
}


void iMouse(int button, int state, int mx, int my)
{
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
	{
		//place your codes here	
		pointerX = mx;
		pointerY = my;
		//setEnemy();
		//puts(enemyPkmn.pokemon_name);
		//printf("%d   %d\n", pointerX, pointerY);
		
	}
	if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
	{
		//place your codes here	
		
	}
}



void iPassiveMouseMove(int mx, int my)
{
	//place your code here

	if (mx == 2) {}        /*Something to do with mx*/
	else if (my == 2) {}   /*Something to do with my*/

}


void iKeyboard(unsigned char key)
{
	//if (b == 1) {
	
		if (key == 'r')
		{
			//do something with 'q'
			//puts(enemyPkmn.pokemon_name);
			//choose =true;
			//b = 1;
			iPauseTimer(t);
			characters[1].health -= 20;
			printf("%d\n", characters[1].health);
		}
		if (moving||!moveAnim[moveNumber-1].show) {
			if (key == 'z')
			{
				fight = true;
				selectedMove = myPkmn_1.move[0];
				moveNumber++;
				moveAnim[moveNumber - 1].x = myPokemonMovement.x;
				moveAnim[moveNumber - 1].y = myPokemonMovement.y;
				moveAnim[moveNumber - 1].show = true;
				//moveNumber=0;
				moving = false;
				printf("used");

			}
			if (key == 'x')
			{
				fight = true;
				selectedMove = myPkmn_1.move[1];
				moveNumber++;
				moveAnim[moveNumber - 1].x = myPokemonMovement.x;
				moveAnim[moveNumber - 1].y = myPokemonMovement.y;
				moveAnim[moveNumber - 1].show = true;
				moving = false;
			}
			if (myPkmn_1.level > 1) 
			{
				if (key == 'c')
				{
					fight = true;
					selectedMove = myPkmn_1.move[2];
					moveNumber++;
					moveAnim[moveNumber - 1].x = myPokemonMovement.x;
					moveAnim[moveNumber - 1].y = myPokemonMovement.y;
					moveAnim[moveNumber - 1].show = true;
					moving = false;
				}
			}
			if (myPkmn_1.level > 2) 
			{
				if (key == 'v')
				{
					fight = true;
					selectedMove = myPkmn_1.move[3];
					moveNumber++;
					moveAnim[moveNumber - 1].x = myPokemonMovement.x;
					moveAnim[moveNumber - 1].y = myPokemonMovement.y;
					moveAnim[moveNumber - 1].show = true;
					moving = false;
				}
			}
		}
			if (key == 'w')
			{
				myPokemonMovement.y += 5;
			}
			if (key == 's') {
				myPokemonMovement.y -= 5;
			}
			if (key == 'a') {
				myPokemonMovement.x -= 5;
			}
			if (key == 'd') {
				myPokemonMovement.x += 5;
		}
	//place your codes for other keys here
}


void iSpecialKeyboard(unsigned char key)
{

	if (key == GLUT_KEY_END)
	{
		exit(0);
	}
	if (notBattle)
	{
		if (key == GLUT_KEY_UP)
			playerY += 5;
		if (key == GLUT_KEY_DOWN)
			playerY -= 5;
		if (key == GLUT_KEY_RIGHT)
			playerX += 5;
		if (key == GLUT_KEY_LEFT)
			playerX -= 5;
	}
	//place your codes for other keys here
}


int main()
{
	srand(time(NULL));
	attack_list();
	pokemon_list();
	//t = iSetTimer(10, setEnemy);
	//iPauseTimer(t);
	setEnimPos();
	//opponentMove.x = 900;
	//setMyPokemon();
	//enemyPkmn = characters[1];
	//movement.x = 600;
	//movement.y = 300;
	t = iSetTimer(40, enimMove);
	iPauseTimer(t);
	t2 = iSetTimer(60, moveAnimation);
	t3 = iSetTimer(30, opponentMovement);
	iPauseTimer(t3);
	t4 = iSetTimer(50, eMoveAnimation);
	//iPauseTimer(t4);
	//iPauseTimer(t3);
	//iPauseTimer(t2);
	iInitialize(960, 640, "pokemon");
	return 0;
}